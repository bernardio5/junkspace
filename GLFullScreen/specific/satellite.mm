/*elliptical orbitslength of major axis = 2a, length of minor axis = 2b a is the major radius, b the minor.  (note that the earth/origin is at the center of a focus, not the ellipse)  f is distance from foci to center, =sqrt(a*a-b*b)ecentricity = sqrt( 1- (b/a)^2 )e*e = 1- (b/a)*(b/a)b/a = sqrt(1-e*e)b = a sqrt(1-e*e)take a to be whatever=> b = a sqrt(1-e*e), f = a * efor e close to 1, a is the closest approachparametric ellipsewith center (Xc, Yc), p=angle of major axis with x-axisx(t) = Xc + a cost cosp  - b sint sinpy(t) = Yc + a cost sinp  + b sint cospfor our basic orbit, p=0  sinp = 0, cosp=1, and the center is at (f, 0, 0)x(t) = (a*e) + a cost y(t) = 0z(t) = b sintAngle of inclination I rotates it around xsetting the ascending node Ni rotates that around y x							      xty = Ry(Ni) Rx(I) Ry(perig-PI?)    ytz							      ztspeed  the orbital period= T = 2 pi sqrt(a*a*a/GM) a = as above (km) GM = 398,600.4418 (km^3/s^2)gives seconds, OKperiod is given; a = cube root(GM*(T/2pi)^2)hah-- orbital period doesn't depend on eccentricity!a = cube root(GM * T*T / (4PI*PI))G * M = 398600.4418T = seconds per orbit - gahwe have orbits per day = (86400 sec/day)  / (orbits /day)T = 86400 / MeanMotiona = cube root(398600.4418 *T*T/ 39.4784176043574)a = cube root(T*T* 10096.6671408837 )This class takes the TLE format data and, on each update call, turns the datainto xt, yt, and zt, where x is the direction to the vernal equinox, y is north, and z is the cross of those. Units are kilometers, kilograms, seconds, and degrees.   Time: Oh Good God.   Ok: the coord system we're using is the celestial sphere.  The earth's orbit moves it negligibly in this frame-- it's mostly directions  The orbit is parametric, defined by an angle.  The sat was observed at a time, called "epoch", measured from Jan 1.  The angle of the sat in it's orbit is in "MeanAnomaly"  so the angle is rate*(time since epoch) + MeanAnomaly */#import "satellite.h"@implementation satellite		- (void) reset:(satInitRec*)it {        objectID = it->objectID;     epoch = it->epoch;    epochYear = 0.0;    dmdt = it->dmdt;    dmdtdt = it->dmdtdt;    bStar = it->bStar;    OID = (it->OID)*(M_PI/180.0);    RAAN = (it->RAAN)*(M_PI/180.0);    eccentricity = (it->eccentricity)/10000000.0;    ArgPerg = (it->ArgPerg)*(M_PI/180.0);    MeanAnomaly = (it->MeanAnomaly)*(M_PI/180.0);    MeanMotion = it->MeanMotion;    RevNumber = it->RevNumber;            // seconds per orbit.    T = 86400.0 / MeanMotion;    // length of the major axis    a = pow((T*T* 10096.6671408837), .333333333); // a in km!     // length of minor axis    b = a * sqrt(1.0-(eccentricity*eccentricity));     ae = a * eccentricity;         radsPerDay = MeanMotion * 2 * M_PI;         // we calculate the orbit assuming the angles of ecc and     // whatnot are 0, then rotate them     mxSetToRotation(&perigXF, (real)ArgPerg, 2);     mxSetToRotation(&raanXF, (real)RAAN, 2);     mxSetToRotation(&oidXF, (real)OID, 1); }		- (void) update:(double)dayOfYear {    double rads, partial;    mVec3 pt;         // compute the location of the thing in the basic ellipse        // we have time since last observation,     // but where in the orbit was it at that time?     partial = dayOfYear ;//- epochYear);  // time since observation    rads = (partial * radsPerDay) + MeanAnomaly;         ///////////// improve this; compensate for variable orbital velocity    // parametric ellipse with center (Xc, Yc), p=angle of major axis with x-axis    // for our basic orbit, p=0  sinp = 0, cosp=1, and the center is at (f, 0, 0)        pos.x = ae + (a * cos(rads));     pos.y = 0.0;     pos.z = b * sin(rads);             mxApply(&perigXF, &pos, &pt);     mxApply(&oidXF, &pt, &pos);     mxApply(&raanXF, &pos, &pt);     mvCopy(&pos, &pt);         rot += dr;}- (void) getPos:(mVec3*)pout {     mvCopy(pout, &pos); }- (void) takeName:(NSString*)n {     name = [[NSString alloc] initWithString: n]; }- (NSString*) getName {     return name; }- (int) getID {     return objectID; }@end