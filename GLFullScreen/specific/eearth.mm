/*  the sats only want to know how long since new year's, in days.  the stars have no questions the SGManager only wants to know where you are.  the sun is right there in your lap    inclination is your view direction's vertical angle from the horizon heading is from the compass-- north is 0 for both. north is always tangential to the surface   lat/lon is from GPS time is seconds since time 0 in 1970;  yearfract is 0->1; how much of a year since the last vernal equinox.  ya gotta have a double to use a year as a unit and not lose seconds.     the radius of the earth is around 6371km the earth rotates once per 23h55m = 86100 s the earth rotates in a positive direction the sun orbits the earth in this coord system! at VE, it is right over the equator (obviously) VE time gives you the longitude  the last VE was on March 20, at 23h21m that was 6,911,700 seconds into the new year!     That means that the sun was at lon 4.59 The sun orbits the earth once every 24 hours = 86400 seconds   The tilt of the earth is fixed.  The tilt is 23.441 degrees. (23 deg 26 min 21 sec, thanks, wikipedia. why not give it to us in elbows?)  The earth goes around the sun. The orbit's direction is negative using the RHR.   At the moment of the VE, the sun is crossing the horizon, going north.  That means that the sun is on the axis of the tilt, and the tilt axis is pointing at the sun.   At the VE, the sun stays over the equator.  The direction from center of earth to sun cuts a circle of ~constant latitude in the earth.   The latitude of the circle is 23.441*sin(2pi yearfract);     Distance from earth to sun is 149,597,870.7 km*/#import "eearth.h"@implementation eearth#define EARTH_SEC_YR 31556736.0#define EARTH_SEC_24H 86400.0#define M_2PI 6.28318530717959#define EARTH_AU 149597870.7#define EARTH_R 6371.0// ~3 earth radii; use for OGL range-setting#define EARTH_FAR 12000.0   // time for earth to revolve once#define EARTH_SEC_TURN 86164.0#define EARTH_RADS_24H 6.3000395// earth_rads_24H - 2pi#define EARTH_DISP_24H .0172024// the sun seems to go around once a day// #define SUN_RADS_24H 6.28318530717959 // lon of sun at VE#define SUN_VE_LON 2.9714230// 23.441 in radians#define EARTH_AXIS_TILT 0.4091226 - (void)timeUpdate {     NSDateFormatter *dateFormatter;    NSLocale *theLocale;    NSDate *equidate, *NYdate;        dateFormatter = [[NSDateFormatter alloc] init];    theLocale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];    [dateFormatter setLocale:theLocale];    [dateFormatter setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"];    [dateFormatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];        equidate = [dateFormatter dateFromString:@"2012-03-20T05:14:00Z"];    daysSinceVE = - [equidate timeIntervalSinceNow] / EARTH_SEC_24H;     //daysSinceVE = 0.0;     yearFract = daysSinceVE / 365.25;         NYdate = [dateFormatter dateFromString:@"2012-01-01T00:00:01Z"];    dayOfYear = - [NYdate timeIntervalSinceNow] / EARTH_SEC_24H;     //dayOfYear = 79.0;}- (id)init {	if ((self = [super init])) {        lat = 0.0;         lon = 0.0;         inclination = 0.0;         heading = 0.0;         clockCounter = 0;                 daysSinceVE = 0.0;        yearFract = 0.0;         dayOfYear = 70.0; // sorta!                [self timeUpdate];         [self update: (double)0.0];	}		return self;}///////////////////////////////////////// interface- (void)takeLatLon:(float)latin:(float)longing {    lat = latin;     lon = longing; // I am from Texas, but I left Texas}- (void)takeHeading:(float)hin {    heading = hin;}- (void)takeIncline:(float)i {    inclination = i; }- (double)getDayOfYear { return dayOfYear; }- (void)getPUD:(mVec3*)pout:(mVec3*)uout:(mVec3*)dout {    mvCopy(pout, &p);     mvCopy(uout, &u);     mvCopy(dout, &d); }- (void)getNE:(mVec3*)nout:(mVec3*)eout {        mvCopy(nout, &dueNorth);     mvCopy(eout, &dueEast); }- (void)getSun:(mVec3*)sout {    mvCopy(sout, &sunPos); }- (void)update:(double)dt {     double sunRads, sunTilt, earthRads, celestialLon, celestialLat;     double wholeSpins, spinFract;         daysSinceVE += (dt/EARTH_SEC_24H);     dayOfYear += (dt/EARTH_SEC_24H);     yearFract = daysSinceVE / 365.25;     //NSLog(@"daysSinceVE %f yf %f", daysSinceVE, yearFract);     // NSLog(@"%f -- %f", daysSinceVE, dayOfYear);     ++clockCounter;     if (clockCounter%9999==1) {        // [self timeUpdate];     }        // figure sun's place    // the earth is turning once every 23h50m;     // the sun is mostly fixed! but it goes around once a year.     sunRads = 2.0 * M_PI * yearFract;     sunTilt = EARTH_AXIS_TILT * sin(2.0 * M_PI * yearFract);        sunPos.x = 3000.0 * cos(sunTilt) * sin(sunRads);     sunPos.y = 3000.0 * sin(sunTilt);     sunPos.z = 3000.0 * cos(sunTilt) * cos(sunRads);     // mvSetf(&sunPos, 0.0, 12000.0, 0.0);         earthRads = EARTH_RADS_24H * daysSinceVE; // how far we've spun since VE    wholeSpins = earthRads/(2.0*M_PI);     spinFract = wholeSpins - floor(wholeSpins);     // compute your personal celestial-sphere coords.     // two angles defining a ray from the center of earth thru you!    /*lat = .6851; // 39.0 * M_PI / 180.0; //ballmer    lon = -1.3389; //-76.0 * M_PI / 180.0;     heading = .5;      inclination = 0.0;     */    celestialLon = lon + earthRads + SUN_VE_LON;     celestialLat = lat;         // place is on a sphere of radius 6371    // that spins depending on the time    //     it's unaffected by orientation or heading    p.x = EARTH_R * cos(celestialLat)*sin(celestialLon);     p.y = EARTH_R * sin(celestialLat);     p.z = EARTH_R * cos(celestialLat)*cos(celestialLon);         mvAddEq(&sunPos, &p);         // goals: p, u, d of the phone in our celestial coord system.     mVec3 localUp, yhat;     mx4 headRot, incRot;         // default u is norm(p), but it gets rotated by heading and orientation    mvCopy(&localUp, &p);     mvNormalize(&localUp); // ok! sorta!        // local east is (up x -y)    // default d is local north, which is up x local east    mvSetf(&yhat, 0.0, -1.0, 0.0);     mvEqCross(&dueEast, &localUp, &yhat);     mvNormalize(&dueEast);             mvEqCross(&dueNorth, &localUp, &dueEast);     mvNormalize(&dueNorth);        mxSetToFreeRotation(&incRot, -inclination, &dueEast);     mxSetToFreeRotation(&headRot, -heading, &localUp);        mvCopy(&u, &localUp);     mvCopy(&d, &dueNorth);         mxApply2(&incRot, &u);     mxApply2(&incRot, &d);     mxApply2(&headRot, &u);     mxApply2(&headRot, &d);         mvNormalize(&u);     mvNormalize(&d);     }@end